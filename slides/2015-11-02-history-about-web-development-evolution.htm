<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Web 前端开发模式演变 - By Jimmy Lv</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/kimbie.light.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.green.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>「Done is better than perfect.」</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Web 前端开发模式演变</h1>
<p><small>by Jimmy Lv</small></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>？</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>被误解的前端</h2>
<img src="///o7mw3gkkh.qnssl.com//css.jpeg" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>热门的前端</h2>
<img src="///o7mw3gkkh.qnssl.com//money.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>两次巨大革命</h2>
<ul>
<li>PC和因特网革命<ul class="moveIn">
<li>35年, -&gt; 21亿台设备</li>
</ul>
</li>
<li>移动互联网革命<ul class="moveIn">
<li>5年, -&gt; 60亿台设备</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>语言排行榜</h2>
<img src="///o7mw3gkkh.qnssl.com//hot_language.jpg" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>JavaScript与Netscape</h2>
<ul>
<li>Sun, Java</li>
<li>Brendan Eich, Scheme</li>
<li>Mircosoft, JScript</li>
<li>ECMAScript</li>
</ul>
<img src="http://image.beekka.com/blog/201106/bg2011062401.jpg" alt="Netscape">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>Web 1.0时代</h2>
<ul class="moveIn">
<li>服务端生成，浏览器负责展现<ul>
<li>Java + JSP | ASP</li>
<li>Tomcat、Apache</li>
</ul>
</li>
<li>缺点：<ul>
<li>JSP代码 越来越多，灰色地带 可维护性差</li>
</ul>
</li>
</ul>
<img src="https://camo.githubusercontent.com/90850e93b917cd3c958dff1c7d0197f819167343/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538" alt="Web 1.0">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>后端MVC时代</h2>
<ul class="moveIn">
<li>Structs、Spring MVC</li>
<li>View层变得简单：模板引擎（ Velocity、Freemaker）</li>
<li>缺点：<ul>
<li>纠缠不清的Controller</li>
<li>前端开发重度绑定后端环境</li>
</ul>
</li>
</ul>
<img src="https://camo.githubusercontent.com/b9e16b0b3ff3361a481badaca7d408e8fa6b404f/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538" alt="后端MVC">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>Web 2.0时代：AJAX</h2>
<ul>
<li>Gmail横空出世，Web Application</li>
<li>Ajax，XMLHttpRequest接口</li>
<li>jQuery，JS操作网页DOM结构变得非常容易</li>
</ul>
<img src="https://camo.githubusercontent.com/d0098546c9fa01b443c16ff1953c90aa9056955b/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538" alt="AJAX">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>单页面应用</h2>
<ul class="moveIn">
<li><code>#</code> 无需刷新页面<ul>
<li>前端路由，展现</li>
<li>后端路由，数据</li>
</ul>
</li>
<li>挑战：<ul>
<li>前后端接口的约定，前端的数据绑定</li>
<li>JavaScript 代码越来越多</li>
</ul>
</li>
</ul>
<img src="https://camo.githubusercontent.com/f064bc7a5b06ea9a39cf039a5dec0ca6675141ff/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538" alt="SPA">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>MV** 时代</h2>
<ul class="moveIn">
<li>Knockout、Backbone、Angular 1.x</li>
<li>前后端分离，职责清晰</li>
<li>缺点：<ul>
<li>代码不能复用（数据校验）</li>
<li>不利于SEO，搜索引擎爬虫不会执行JS</li>
<li>性能并非最佳，移动端网络是个渣</li>
</ul>
</li>
</ul>
<img src="https://camo.githubusercontent.com/2ab0e0e247dfae7b74760b7d57056a680204874d/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>全栈时代：Node.js</h2>
<ul class="moveIn">
<li>异步IO：JS单线程 + Chrome的V8编译器</li>
<li>Front-end：只处理浏览器层的展现逻辑 | 路由、模板、数据获取</li>
<li>Node Web Server：业务逻辑，SEO时使用服务端渲染</li>
<li>Universal JavaScript：前后复用部分逻辑代码</li>
<li>回归后端，JS-&gt;Node / Java-&gt;JSP</li>
</ul>
<img src="http://assets.toptal.io/uploads/blog/image/25/toptal-blog-image-1374849974023.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>未来：前端组件化</h2>
<p>如何将来自于服务器端或者用户输入的动态数据高效的反映到复杂的用户界面上。</p>
<ul>
<li>下一代的HTML标准：Web Component</li>
<li>React、Angular 2.0、Polymer</li>
<li>转译语言：TypeScript、CoffeeScript、ES6</li>
</ul>
<img src="https://github.com/fouber/blog/raw/master/201508/assets/modular-component.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>跨平台时代：界面编程</h2>
<ul class="moveIn">
<li>Webkit：Electron</li>
<li>Hybrid App：WebView</li>
<li>React Native</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>Atwood&#39;s Law</h2>
<p>Any application that can be written in JavaScript, </p>
<p>will eventually be written in JavaScript.</p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'move',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./assets/slide.js"></script>
<link rel="stylesheet" href="./assets/slide.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
