<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>前端模块化小史，Webpack 入门 - By Jimmy Lv</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/kimbie.light.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.green.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide" data-on-enter="incallback"><section class="slide-wrapper"><article>
<div id="incallback" style="margin-bottom: 30px; font-size: 60px;"></div><pre><code class="js">function incallback() {
    setTimeout(function(){
        alert(&#39;Done is better than perfect.  -  via Facebook&#39;);
        document.getElementById(&#39;incallback&#39;).innerHTML = &#39;Welcome to my session!&#39;;
    }, 300)
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>前端模块化小<del>屎</del>史，Webpack 入门</h1>
<p><small>by <strong>Jimmy Lv</strong></small></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>模块化管理？</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h1>JavaScript 模块化</h1>

</hgroup><article>

<ul class="fadeIn">
<li>ES6 Module</li>
<li>CommonJS</li>
<li>AMD</li>
<li>UMD</li>
</ul>

</article></section></slide>
<slide class="slide" data-on-leave="outcallback"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>现在即未来：ES6 模块规范</h1>
<pre><code class="js">// profile.js
var firstName = &#39;Michael&#39;;
var lastName = &#39;Jackson&#39;;

var sayHi = () =&gt; {
    console.info(&#39;I am &#39;+ firstName + &#39;,&#39; + lastName + &#39;!&#39;);
    console.info(`I am ${firstName}, ${lastName}!`);
}

export {firstName, lastName, sayHi};
</code></pre>
<pre><code class="js">// main.js
import {firstName, lastName, sayHi} from &#39;./profile&#39;;

import * as profile from &#39;./profile&#39;;
profile.sayHi();
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>民间两大规范</h1>
<ul>
<li>CommonJS: 同步加载，主要用于 NodeJS <strong>服务器</strong>端；</li>
<li>AMD: 异步加载，通过 RequireJS 等工具适用于<strong>浏览器</strong>端。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>过去式：CommonJS 规范</h1>
<blockquote>
<p>NodeJS: <del>JavaScript 要逆袭！我是窜天</del> 🐵，<del>我要上天！</del></p>
</blockquote>
<p><br/></p>
<pre><code class="js">var firstModule = require(&quot;firstModule&quot;);

//playing code...

module.export = anotherModule
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>JavaScript 组件发布平台：NPM</h1>
<p><br/></p>
<blockquote>
<p>🐒🐒🐒🐒🐒：前端项目要是能在<strong>浏览器</strong>中更方便地使用 <strong>NPM 资源</strong>就好了！</p>
</blockquote>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h1>过去式：AMD 规范</h1>
<blockquote class="pull-right">
<p>即 (Asynchronous Module Definition)</p>
</blockquote>

</hgroup><article>

<pre><code class="js">define([&#39;firstModule&#39;], function(module) {

    //playing code...

    return anotherModule
})
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Browserify.js</h1>
<blockquote>
<p>🐒🐒🐒🐒🐒：要是能在浏览器使用 <em>require</em> 同步语法加载 NPM 模块就好了！</p>
</blockquote>
<p><br/></p>
<pre><code class="js">var firstModule = require(&quot;firstModule&quot;);

//playing code...

module.export = anotherModule
</code></pre>
<pre><code class="js">define([&#39;firstModule&#39;], function(module) {

    //playing code...

    return anotherModule
})
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h1>「通用」模式：UMD</h1>
<blockquote class="pull-right">
<p>即 (Universal Module Definition)</p>
</blockquote>

</hgroup><article>

<pre><code class="js">(function (root, factory) {
    if (typeof define === &#39;function&#39; &amp;&amp; define.amd) {
        // AMD
        define([&#39;jquery&#39;], factory);
    } else if (typeof exports === &#39;object&#39;) {
        // Node, CommonJS
        module.exports = factory(require(&#39;jquery&#39;));
    } else {
        // 浏览器全局变量(root 即 window)
        root.returnExports = factory(root.jQuery);
    }
}(this, function ($) {
    //    方法
    function myFunc(){};
    //    暴露公共方法
    return myFunc;
}));
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>前端工程化需求</h1>
<blockquote>
<p>前端模块化框架肩负着 模块管理、资源加载 两项重要的功能，这两项功能与工具、性能、业务、部署等工程环节都有着非常紧密的联系。因此，模块化框架的设计应该最高优先级考虑工程需要。</p>
</blockquote>
<p><br/></p>
<ul class="rollIn">
<li>依赖管理</li>
<li>按需加载</li>
<li>请求合并</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<blockquote>
<p>关键原因就在于<a href="https://github.com/fouber/blog/issues/4" target="_blank">「纯前端方式只能在运行时分析依赖关系」</a></p>
</blockquote>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>新思路：「不」在运行时分析依赖。</h1>
<ul>
<li>借助构建工具来做线下分析:</li>
</ul>
<p><br/></p>
<blockquote>
<p>利用构建工具在线下进行模块依赖分析，然后把依赖关系数据写入到构建结果中，并调用模块化框架的依赖关系声明接口，实现模块管理、请求合并以及按需加载等功能。</p>
</blockquote>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>主角：Webpack</h1>
<blockquote>
<p>「任何静态资源都可以视作模块，然后模块之间还可以相互依赖。」</p>
</blockquote>
<img src="https://webpack.github.io/assets/what-is-webpack.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>特性</h1>
<ol class="rollIn">
<li>兼容CommonJS 、 AMD 、ES6语法</li>
<li>支持打包 JS、CSS、图片等资源文件</li>
<li>串联式 loader 以及插件机制</li>
<li>独立配置文件 <strong>webpack.config.js</strong></li>
<li>代码切割 chunk，实现按需加载</li>
<li>支持 SourceUrls 和 SourceMaps</li>
<li>具有强大的 Plugin 接口，使用灵活</li>
<li>支持异步 IO 并具有多级缓存，增量编译速度快</li>
</ol>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>一个简单的 React 例子</h1>
<pre><code class="js">// hello.js
import React, {Component} from &#39;react&#39;;

class Hello extends Component {
    render(){
        return (
            &lt;div&gt;Hello, {this.props.name}!&lt;/div&gt;
        );
    }
}

export default Hello;
</code></pre>
<pre><code class="js">// entry.js
import React from &#39;react&#39;;
import Hello from &#39;./hello&#39;;

React.render(&lt;Hello name=&quot;Jimmy&quot; /&gt;, document.body);
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Webpack 配置文件</h1>
<pre><code class="js">// webpack.config.js
var path = require(&#39;path&#39;);

module.exports = {
    entry: path.resolve(__dirname, &#39;./src/entry.js&#39;),
    output: {
        path: path.resolve(__dirname, &#39;./assets&#39;),
        filename: &#39;bundle.js&#39;
    },

    module: {
        loaders: [
            { test: /\.js?$/, loaders: &#39;babel-loader&#39;, exclude: /node_modules/ },
        ]
    },

    resolve:{
        extensions:[&#39;&#39;,&#39;.js&#39;,&#39;.json&#39;]
    },
};
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>打包完毕</h1>
<pre><code>// index.html

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;React Sample&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script src=&quot;./assets/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>实战：重构现有项目</h1>
<ul>
<li>代码热加载</li>
<li>配置 NPM Script</li>
<li>babel-loader: 预编译 ES6</li>
<li>ng-annotate-loader: 确保依赖安全注入</li>
<li>less-loader: 使用 Less 替换 CSS</li>
<li>ngtemplate-loader: String 化 HTML 模板</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>代码热加载：webpack-dev-server</h1>
<blockquote>
<p><strong>webpack-dev-server</strong> 是一个基于 Express.js 框架的静态资源 Web 服务器。开发服务器会监听每一个文件的变化，进行实时打包，并推送通知给前端页面，从而实现自动刷新。</p>
</blockquote>
<p><br/></p>
<pre><code class="js">module.exports = {
    entry: {
        app: [&#39;webpack/hot/dev-server&#39;, &#39;./app.js&#39;]
    },
    output: {
        path: &#39;./assets&#39;,
        filename: &#39;bundle.js&#39;
    },
    ...
}
</code></pre>
<p>默认端口 8080：<a href="localhost:8080/webpack-dev-server/" target="_blank">localhost:8080/webpack-dev-server/</a></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>配置 NPM Script</h1>
<pre><code class="json">&quot;scripts&quot;: {
    &quot;dev&quot;: &quot;webpack -w --bail --display-error-details&quot;,
    &quot;start&quot;: &quot;webpack-dev-server --history-api-fallback --hot --inline --progress&quot;,
    &quot;build&quot;: &quot;webpack -p&quot;
}
</code></pre>
<pre><code class="bash">npm run dev # 提供 watch 方法，实时进行打包更新并打印出错信息
npm start # 启动服务器，浏览器直接访问的是 index.html
npm run build # 输出 production 环境下的压缩打包代码
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>babel-loader 预编译 ES6</h1>
<pre><code class="json">module: {
    loaders: [
      {test: /\.js$/, exclude: /node_modules/, 
        loader: &#39;ng-annotate!babel?presets=es2015&#39;}
    ]
}
</code></pre>
<pre><code class="js">require (&#39;./style/base.less&#39;);

import angular from &#39;angular&#39;
import ngRoute from &#39;angular-route&#39;

import githubService from &#39;./app/services/githubService&#39;
import MainCtrl from &#39;./app/controllers/mainController&#39;
import Components from &#39;./app/components/components.module&#39;
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>ng-annotate-loader 依赖安全注入</h1>
<pre><code class="js">controller($http, $routeParams, base64) {
    &#39;ngInject&#39;;

    var vm = this;

    vm.$onInit = () =&gt; {
        ...
    }
}
</code></pre>
<pre><code class="js">controller:[&quot;$http&quot;,&quot;$routeParams&quot;,&quot;base64&quot;,function(e,t,n){&quot;ngInject&quot; ...}]
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>使用 Less 替换 CSS</h1>
<pre><code class="js">{test: /\.less$/, loader: &quot;style!css!less&quot;},

{test: /\.(eot|woff|woff2|ttf|svg)(\?\S*)?$/, 
    loader: &#39;url?limit=100000&amp;name=./fonts/[name].[ext]&#39;},
{test: /\.(png|jpe?g|gif)$/, 
    loader: &#39;url-loader?limit=8192&amp;name=./images/[hash].[ext]&#39;}
</code></pre>
<pre><code class="js">import &#39;../../node_modules/font-awesome/css/font-awesome.css&#39;
import &#39;../../assets/styles/bootstrap.css&#39;
import &#39;../../assets/styles/yue.css&#39;
import &#39;../../assets/styles/base.less&#39;
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>String 化 HTML 模板</h1>
<pre><code class="js">{test: /\.html$/, loader: &#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;}
</code></pre>
<pre><code class="js">import &#39;./post.less&#39;

export default {
  templateUrl: require(&#39;./post.html&#39;),
  bindings: {
    pageContent: &#39;&lt;&#39;,
    showToc: &#39;&lt;&#39;
  }
  controller() {
    ...
  }
</code></pre>
<pre><code class="js">import post from &#39;./post/post&#39;

export default angular.module(&#39;app.note&#39;, [])
  .component(&#39;post&#39;, post);
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>AngularJS 组件结构</h1>
<pre><code class="bash">app/
├── app.js
├── commons
│   ├── commons.module.js
│   ├── footer
│   │   ├── footer.html
│   │   └── footer.js
│   ├── header
│   │   ├── header.html
│   │   ├── header.js
│   │   └── header.less
├── configs
│   ├── app.config.js
│   ├── app.routes.js
│   ├── app.run.js
│   └── configs.module.js
├── features
│   ├── features.module.js
│   ├── apps
│   │   ├── apps.html
│   │   └── apps.js
│   └── note
│       ├── note.html
│       ├── note.js
│       ├── note.less
│       ├── note.module.js
│       ├── page
│       │   ├── page.html
│       │   ├── page.js
│       │   └── page.less
│       ├── post
│       │   ├── post.html
│       │   ├── post.js
│       │   └── post.less
└── services
    ├── githubService.js
    ├── musicService.js
    └── services.module.js
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>「越痛苦的事情越要早做」</h1>
<pre><code class="js">var path = require(&#39;path&#39;);
var webpack = require(&#39;webpack&#39;);

module.exports = {
  context: __dirname,
  entry: {
    app: [&#39;webpack/hot/dev-server&#39;, &#39;./app/app.js&#39;]
  },
  output: {
    path: &#39;./dist&#39;,
    filename: &#39;bundle.js&#39;
  },

  module: {
    loaders: [
      {test: /\.js$/, exclude: /node_modules/, loader: &#39;ng-annotate?add=true!babel-loader&#39;},
      {test: /\.css$/, loader: &quot;style!css&quot;},
      {test: /\.less$/, loader: &quot;style!css!less&quot;},
      {test: /\.(eot|woff|woff2|ttf|svg)(\?\S*)?$/, loader: &#39;url?limit=100000&amp;name=./fonts/[name].[ext]&#39;},
      {test: /\.(png|jpe?g|gif)$/, loader: &#39;url-loader?limit=8192&amp;name=./images/[hash].[ext]&#39;},
      {test: /\.html$/, loader: &#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;}
    ],
    noParse: []
  },

  plugins: [
    new webpack.HotModuleReplacementPlugin()
  ],

  resolve: {
    extensions: [&#39;&#39;, &#39;.js&#39;, &#39;.json&#39;],
    alias: {
      &#39;react&#39;: &#39;./pages/build/react&#39;
    },
    modulesDirectories: [&#39;node_modules&#39;, &#39;bower_components&#39;]
  }
};
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h1><a href="http://nobackend.website" target="_blank">NoBackend Website</a></h1>

</hgroup><article>

<iframe data-src="http://nobackend.website" src="about:blank;"></iframe>
</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'move',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./assets/slide.js"></script>
<link rel="stylesheet" href="./assets/slide.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
